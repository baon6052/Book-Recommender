{"version":3,"sources":["logo.svg","components/Book/Book.jsx","pages/Books/Books.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Book","props","className","classes","container","src","ImgUrl","book_img","book_info","book_name","BookName","book_authour","BookAuthour","Books","useState","books","setBooks","useEffect","axios","get","then","res","console","log","App","Container","window","token","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAAAA,EAAOC,QAAU,IAA0B,2B,qKCgB5BC,EAZF,SAAAC,GACX,OACE,yBAAKC,UAAWC,IAAQC,WACtB,yBAAKC,IAAKJ,EAAMK,OAAQJ,UAAWC,IAAQI,WAC3C,yBAAKL,UAAWC,IAAQK,WACtB,uBAAGN,UAAWC,IAAQM,WAAtB,IAAmCR,EAAMS,SAAzC,KACA,uBAAGR,UAAWC,IAAQQ,cAAtB,IAAsCV,EAAMW,YAA5C,QCsBOC,EA1BD,SAAAZ,GAAU,IAAD,EACKa,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,KAmBrB,OARAC,qBAAU,WACRC,IAAMC,IAAN,UAAoBC,MAAK,SAAAC,GACvBL,EAASK,EAAIN,aAIjBO,QAAQC,IAAIR,GAGV,yBAAKb,UAAWC,IAAQH,MACtB,kBAAC,EAAD,QCXSwB,MATf,WACE,OACE,yBAAKtB,UAAWC,IAAQsB,WACtB,0CAAgBC,OAAOC,OACvB,kBAAC,EAAD,QCCcC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"js/main.67539fe2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nimport classes from \"./Book.css\";\r\n\r\nconst Book = props => {\r\n  return (\r\n    <div className={classes.container}>\r\n      <img src={props.ImgUrl} className={classes.book_img} />\r\n      <div className={classes.book_info}>\r\n        <p className={classes.book_name}> {props.BookName} </p>\r\n        <p className={classes.book_authour}> {props.BookAuthour} </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Book;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport classes from \"./Books.css\";\r\n\r\nimport Book from \"../../components/Book/Book\";\r\n\r\nconst Books = props => {\r\n  const [books, setBooks] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   fetch(\"/books\").then(response =>\r\n  //     response.json().then(data => {\r\n  //       setBooks(data.books);\r\n  //     })\r\n  //   );\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/books`).then(res => {\r\n      setBooks(res.books);\r\n    });\r\n  });\r\n\r\n  console.log(books);\r\n\r\n  return (\r\n    <div className={classes.Book}>\r\n      <Book />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Books;\r\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\n\nimport classes from \"./App.css\";\n\nimport Books from \"./pages/Books/Books\";\n\nfunction App() {\n  return (\n    <div className={classes.Container}>\n      <p> My token = {window.token}</p>\n      <Books />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}